#lang racket

(define deck '((1 "Ace" "D")(1 "Ace" "S")(1 "Ace" "T")(1 "Ace" "H")
                               (2 "2" "D")(2 "2" "S")(2 "2" "T")(2 "2" "H")
                               (3 "3" "D")(3 "3" "S")(3 "3" "T")(3 "3" "H")
                               (4 "4" "D")(4 "4" "S")(4 "4" "T")(4 "4" "H")
                               (5 "5" "D")(5 "5" "S")(5 "5" "T")(5 "5" "H")
                               (6 "6" "D")(6 "6" "S")(6 "6" "T")(6 "6" "H")
                               (7 "7" "D")(7 "7" "S")(7 "7" "T")(7 "7" "H")
                               (8 "8" "D")(8 "8" "S")(8 "8" "T")(8 "8" "H")
                               (9 "9" "D")(9 "9" "S")(9 "9" "T")(9 "9" "H")
                               (10 "10" "D")(10 "10" "S")(10 "10" "T")(10 "10" "H")
                               (10 "Jack" "D")(10 "Jack" "S")(10 "Jack" "T")(10 "Jack" "H")
                               (10 "Queen" "D")(10 "Queen" "S")(10 "Queen" "T")(10 "Queen" "H")
                               (10 "King" "D")(10 "King" "S")(10 "King" "T")(10 "King" "H")))

(define(show-deck index deck)
  (cond((null? deck)
        #f)
       (else
        (show-deck-aux index deck))))
                               